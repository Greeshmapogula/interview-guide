class HashTable:
    def __init__(self):
        self.size = 13
        self.n = 4
        self.count = 0
        self.load = 0.75
        self.table = [None]*self.size

    def __nextPrime(self):
        self.size = 2**self.n -1
        return self.size

    def __hash(self, key):              #  random hashing function (replace with better function)
        if (type(key) is str):          #  accepts chars, strings, and ints
            hash = ((ord(key)*5)+2)//3

        else:
            hash = (key*5+2)//3

        index = hash % self.size
        return index

    def __resize(self):
        self.size = self.__nextPrime()
        self.n += 1
        tmp = []
        for i in range(0, self.size):
            tmp.append([])

        for i in self.table:
            if i is not None:
                index = self.__hash(i)
                self.table[index] = i

    def set(self, key):
        index = self.__hash(key)
        if self.table[index] is None:
            self.table[index] = key

        else:
            i = 1
            newIndex = index + 1
            if newIndex >= self.size:
                newIndex = newIndex % self.size

            while self.table[newIndex]:
                #i += 1                     #  linear probing
                i = (i+1)**2                #  quadratic probing
                newIndex += i

                if newIndex >= self.size:
                    newIndex = newIndex % self.size

            self.table[newIndex] = key
            self.count += 1

        if self.count/self.size >= self.load:
            self.__resize()

    def get(self, key):
        index = self.__hash(key)

        return index

    def __getitem__(self, index):
        return self.table[index]

    def __contains__(self, key):
        index = self.__hash(key)

        return key in self.table[index]

    def __len__(self):
        return self.count


test = HashTable()
test.set(100)
test.set(150)
test.set(200)
test.set(211)
for i in test:
    print(i)
print("------------------")
test.set(300)
test.set(400)
test.set(500)
test.set(600)
test.set(700)
test.set(800)
test.set(900)
test.set(1100)
test.set(13)
test.set(15)
test.set(-1)

for i in test:
    print(i)

